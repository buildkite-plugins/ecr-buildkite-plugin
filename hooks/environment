#!/usr/bin/env bash
set -eu -o pipefail

# Some callers slightly abuse this script by including it via Bash's `source` command, instead of calling it as an executable. This means this code is sometimes executed with extra Bash context (namely options and error traps) that change how the code is interpreted. This interference is not always desirable, but unfortunately we must tolerate usage via `source`.
#
# First we detect whether the `-E` option is set. This matters because when `-E` is combined with an error trap (as in the agent environment hook), it breaks this hook's retry functionality.
#
# The special $- variable is a list of all the options currently set. We find out if it contains 'E', and store the result in WAS_BIG_E_OPTION_SET_AT_START.
#
# We'll use WAS_BIG_E_OPTION_SET_AT_START later on, to decide if we need to remove and reinstate it around retries.
#
WAS_BIG_E_OPTION_SET_AT_START=no
if [[ "$-" =~ "E" ]]; then
  WAS_BIG_E_OPTION_SET_AT_START=yes
fi

# Reads either a value or a list from plugin config
function plugin_read_list() {
  local prefix="BUILDKITE_PLUGIN_ECR_$1"
  local parameter="${prefix}_0"

  if [[ -n "${!parameter:-}" ]]; then
    local i=0
    local parameter="${prefix}_${i}"
    while [[ -n "${!parameter:-}" ]]; do
      echo "${!parameter}"
      i=$((i+1))
      parameter="${prefix}_${i}"
    done
  elif [[ -n "${!prefix:-}" ]]; then
    echo "${!prefix}"
  fi
}

# Check a provided aws-cli version is greater or equal than the current
function aws_version_ge() {
  local current; current="$(aws --version 2>&1 | awk -F'[/ ]' '{print $2}')"
  local wanted="$1"
  version_a_gte_b "$current" "$wanted"
}

# Whether version A >= B, for versions in the form of major.minor.patch
# Returns success (0) if true, and error (1) if false.
function version_a_gte_b() {
  IFS="." read -r -a a <<< "$1"
  if [[ ! ${#a[@]} -eq 3 ]] ; then
    echo "Expected $1 to be in the form x.y.z" >&2
    exit 1
  fi
  IFS="." read -r -a b <<< "$2"
  if [[ ! ${#b[@]} -eq 3 ]] ; then
    echo "Expected $2 to be in the form x.y.z" >&2
    exit 1
  fi
  [[ ${a[0]} -lt ${b[0]} ]] && return 1 # major less
  [[ ${a[0]} -gt ${b[0]} ]] && return 0 # major more
  [[ ${a[1]} -lt ${b[1]} ]] && return 1 # major same, minor less
  [[ ${a[1]} -gt ${b[1]} ]] && return 0 # major same, minor more
  [[ ${a[2]} -lt ${b[2]} ]] && return 1 # major same, minor same, patch less
  return 0                              # major same, minor same, patch same or more
}

# Bash's -E option propagates error traps into called functions. In the case of the `_retry` function, we don't want to do that because if we interrupt execution on an error, it becomes impossible to retry.
#
# We need to do this in a wrapper because by the time we are executing _retry, it's too late to unset the error trap.
#
function retry() {
  local -r -i retries="$1"; shift
  local exit_code
  local stdin_value

  cmd=(_retry "$retries")
  if [[ "$1" == "--with-stdin" ]]; then
    cmd+=(--with-stdin)
    read -sr stdin_value
    shift
  fi

  [[ "$WAS_BIG_E_OPTION_SET_AT_START" == "yes" ]] && set +E

  "${cmd[@]}" "$@" <<< "${stdin_value:-}"
  exit_code=$?

  [[ "$WAS_BIG_E_OPTION_SET_AT_START" == "yes" ]] && set -E

  return $exit_code
}

# Retries a command on failure.
function _retry() {
  local -r -i retries="$1"; shift
  local -i max_attempts=$((retries + 1))
  local -i attempt_num=1
  local exit_code
  local stdin_value

  if [[ "$1" == "--with-stdin" ]]; then
    read -sr stdin_value
    shift
  fi

  while (( attempt_num <= max_attempts )); do
    set +e
    "$@" <<< "${stdin_value:-}"
    exit_code=$?
    set -e

    if [[ $retries -eq 0 ]] || [[ $exit_code -eq 0 ]]; then
      return $exit_code
    elif (( attempt_num == max_attempts )) ; then
      echo "Login failed after $attempt_num attempts" >&2
      return $exit_code
    else
      echo "Login failed on attempt ${attempt_num} of ${max_attempts}. Trying again in $attempt_num seconds..." >&2
      sleep $(( attempt_num++ ))
    fi
  done
}

# 'aws ecr get-login' was removed in awscli 2.0.0, but the alternative
# 'aws ecr get-login-password' was not available until v1.7.10 which
# was only released earlier that same month.
function login_using_aws_ecr_get_login() {
  echo "~~~ Authenticating with AWS ECR :ecr: :docker:"

  # bash 3.x compatible equivalent of mapfile;
  # https://github.com/koalaman/shellcheck/wiki/SC2207
  registry_ids=()
  while IFS='' read -r line; do registry_ids+=("$line"); done < <(plugin_read_list ACCOUNT_IDS | tr "," "\n")

  login_args=()

  # If not specified, auto-detect if we can support no-include-email
  if [[ -z "${BUILDKITE_PLUGIN_ECR_NO_INCLUDE_EMAIL:-}" ]] ; then
    if aws_version_ge "1.11.91" ; then
      BUILDKITE_PLUGIN_ECR_NO_INCLUDE_EMAIL="true"
    else
      BUILDKITE_PLUGIN_ECR_NO_INCLUDE_EMAIL="false"
    fi
  fi

  if [[ $BUILDKITE_PLUGIN_ECR_NO_INCLUDE_EMAIL =~ (true|on|1) ]] ; then
    login_args+=("--no-include-email")
  fi

  if [[ -z "${AWS_DEFAULT_REGION:-}" ]] ; then
    export AWS_DEFAULT_REGION="us-east-1"
  fi

  # In earlier versions, we supported registry-region. This is now deprecated
  if [[ -n "${BUILDKITE_PLUGIN_ECR_REGISTRY_REGION:-}" ]] ; then
    login_args+=("--region" "${BUILDKITE_PLUGIN_ECR_REGISTRY_REGION}")
  fi

  if [[ -n "${BUILDKITE_PLUGIN_ECR_REGION:-}" ]] ; then
    login_args+=("--region" "${BUILDKITE_PLUGIN_ECR_REGION}")
  fi

  if [[ ${#registry_ids[@]} -gt 0 ]] ; then
    # amend the ~~~ log heading with ^^^ to add the AWS account IDs
    echo "^^^ Authenticating with AWS ECR for ${registry_ids[*]} :ecr: :docker:"
    login_args+=("--registry-ids" "${registry_ids[@]}")
  fi

  # shellcheck disable=SC2068
  ecr_login=$(retry "${BUILDKITE_PLUGIN_ECR_RETRIES:-0}" aws ecr get-login ${login_args[@]+"${login_args[@]}"}) || exit $?

  # despite all the horror above, if we have docker > 17.06 it still breaks...
  ecr_login="${ecr_login//-e none/}"

  eval "$ecr_login"
}

function login_using_aws_ecr_get_login_password() {
  echo "~~~ Authenticating with AWS ECR :ecr: :docker:"
  local region="${BUILDKITE_PLUGIN_ECR_REGISTRY_REGION:-${BUILDKITE_PLUGIN_ECR_REGION:-${AWS_DEFAULT_REGION:-}}}"
  if [[ -z $region ]]; then
    region="us-east-1"
    echo >&2 "AWS region should be specified via plugin config or AWS_DEFAULT_REGION environment."
    echo >&2 "Defaulting to $region for legacy compatibility."
  fi

  login_args=("--region" "${region}")

  if [[ -n "${BUILDKITE_PLUGIN_ECR_PROFILE:-}" ]] ; then
    login_args+=("--profile" "${BUILDKITE_PLUGIN_ECR_PROFILE}")
  fi

  account_ids=()
  while IFS='' read -r line; do account_ids+=("$line"); done < <(plugin_read_list ACCOUNT_IDS | tr "," "\n")
  # check if account_ids is empty, or only contains an empty string.
  # just testing [[ -z ${account_ids[*]} ]] breaks on bash 3.x if the array is empty.
  if [[ ${#account_ids[@]} -eq 0 || -z "${account_ids[*]}" ]]; then
    account_ids=("$(aws sts get-caller-identity --query Account --output text)")
  fi
  if [[ ${#account_ids[@]} -eq 0 || -z "${account_ids[*]}" ]]; then
    echo >&2 "AWS account ID required via plugin config or 'aws sts get-caller-identity'"
    exit 1
  fi
  # amend the ~~~ log heading with ^^^ to add the AWS account IDs
  echo "^^^ Authenticating with AWS ECR in $region for ${account_ids[*]} :ecr: :docker:"

  local ecr_registry_url;
  if [[ ${region:0:3} == "cn-" ]]; then
    # the ecr registry in China regions has a different URL
    ecr_registry_url="$account_id.dkr.ecr.$region.amazonaws.com.cn"
  else
    ecr_registry_url="$account_id.dkr.ecr.$region.amazonaws.com"
  fi

  local password;
  local public_password;
  for account_id in "${account_ids[@]}"; do
    if [[ $account_id == "public.ecr.aws" ]]; then
      # special AWS command with us-east-1 region 
      echo "Ignoring region for $account_id and forcing us-east-1"
      public_password="$(retry "${BUILDKITE_PLUGIN_ECR_RETRIES:-0}" aws --region us-east-1 ecr-public get-login-password)"
      retry "${BUILDKITE_PLUGIN_ECR_RETRIES:-0}" --with-stdin docker login --username AWS --password-stdin public.ecr.aws <<< "$public_password"
    else
      # it is only necessary to get the password once
      password=${password:-"$(retry "${BUILDKITE_PLUGIN_ECR_RETRIES:-0}" aws ${login_args[@]+"${login_args[@]}"} ecr get-login-password)"}
      retry "${BUILDKITE_PLUGIN_ECR_RETRIES:-0}" --with-stdin docker login --username AWS --password-stdin "$ecr_registry_url" <<< "$password"
    fi
  done
}

function login() {
  if aws_version_ge "1.17.10"; then
    # 'aws ecr get-login-password' was added in awscli 1.17.10
    login_using_aws_ecr_get_login_password
  else
    # older awscli versions must use 'aws ecr get-login'
    login_using_aws_ecr_get_login
  fi
}

function assume_role_for_ecr_login() {
  local export_credentials

  # This query creates an outer array, then multiple inner arrays of [key,value]
  # pairs. Then it projects the outer array, and joins each inner array to form
  # a key=value string. Printing the final array with --output text results in a
  # string of the key=value pairs joined by space characters.
  export_credentials="$(aws sts assume-role \
    --role-arn "${BUILDKITE_PLUGIN_ECR_ASSUME_ROLE_ROLE_ARN}" \
    --role-session-name "ecr-login-buildkite-plugin" \
    --duration-seconds "${BUILDKITE_PLUGIN_ECR_ASSUME_ROLE_DURATION_SECONDS:-3600}" \
    --output text \
    --query "[['AWS_ACCESS_KEY_ID',Credentials.AccessKeyId],['AWS_SECRET_ACCESS_KEY',Credentials.SecretAccessKey],['AWS_SESSION_TOKEN',Credentials.SessionToken]][*].join(\`=\`,@)")"

  #shellcheck disable=SC2086
  export ${export_credentials?}
}

if [[ "${BUILDKITE_PLUGIN_ECR_LOGIN:-}" =~ ^(true|1)$ ]] ; then
  (
    if [[ -n "${BUILDKITE_PLUGIN_ECR_ASSUME_ROLE_ROLE_ARN:-}" ]]; then
      assume_role_for_ecr_login
    fi

    login
  )
fi
